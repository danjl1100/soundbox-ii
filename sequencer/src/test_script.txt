node add . src
node add .
# node add .1 src
node add .1 ../q-filter-tree/tests

# node set-filter .1 ..
node set-weight .0 2
node print
node set-weight .1.0 --item-index 1 5
node set-order-type .1.0 round-robin
node set-order-type .0 shuffle

node prefill 5
node prefill 2 .0
node prefill 2 .1.0

# remove from queue, to only have "q-filter-tree test prefill" elements
# .1.0 is [x, O]
node queue-remove 0 .1.0
# .1.0 is [O, x]
node queue-remove 4
# .1.0 is [x, x] for a while...
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 0 .1.0
# .1.0 is [O, x]
node queue-remove 3
node queue-remove 4
node queue-remove 4
# root is now [x, x, x, O, O]
# .1.0 is [x, x]
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
# .1.0 is [x, O]
node queue-remove 0 .1.0
node queue-remove 2
node queue-remove 4
node queue-remove 4
# root is now [x, x, O, O, O]
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 0 .1.0
# .1.0 is [O, x]
node queue-remove 1
node queue-remove 4
node queue-remove 4
# root is now [x, O, O, O, O]
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 1 .1.0
node queue-remove 0 .1.0
# .1.0 is [O, x]
node queue-remove 0
node queue-remove 4
node queue-remove 4
node print
n 5
node print
